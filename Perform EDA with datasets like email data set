import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud, STOPWORDS
import numpy as np

def perform_eda(file_path, text_column=None):
    """
    Performs Exploratory Data Analysis (EDA) on a given dataset.

    Args:
        file_path (str): The path to the dataset file (e.g., CSV).
        text_column (str, optional): The name of the text column for word cloud.
                                     Defaults to None.
    """
    try:
        # 1. Load dataset
        df = pd.read_csv(file_path)
        print(f"--- EDA for {file_path} ---")

        # 2. Basic info
        print("\nShape of dataset:", df.shape)
        print("\nColumns and data types:\n", df.dtypes)
        print("\nFirst 5 rows:\n", df.head())

        # 3. Summary statistics for numeric columns
        print("\nSummary statistics:\n", df.describe())

        # 4. Check missing values
        print("\nMissing values per column:\n", df.isnull().sum())

        # 5. Visualize distributions of numeric columns
        numeric_cols = df.select_dtypes(include=np.number).columns.tolist()
        if numeric_cols:
            df[numeric_cols].hist(bins=15, figsize=(12,6))
            plt.suptitle("Distribution of Numeric Features")
            plt.show()
        else:
            print("\nNo numeric columns to display distributions.")

        # 6. Correlation heatmap
        if len(numeric_cols) > 1:
            plt.figure(figsize=(10,6))
            sns.heatmap(df[numeric_cols].corr(), annot=True, cmap='coolwarm')
            plt.title('Correlation Heatmap')
            plt.show()
        else:
            print("\nNot enough numeric columns for correlation heatmap.")

        # 7. Visualize missing data pattern
        plt.figure(figsize=(10, 6))
        sns.heatmap(df.isnull(), cbar=False, yticklabels=False, cmap='viridis')
        plt.title("Missing Values Heatmap")
        plt.show()


        # 8. Basic counts for categorical columns
        cat_cols = df.select_dtypes(include='object').columns.tolist()
        if cat_cols:
            for col in cat_cols:
                print(f"\nValue counts for '{col}':")
                print(df[col].value_counts().head(10)) # Display top 10 values
        else:
            print("\nNo categorical columns found.")

        # 9. Word cloud for text content
        if text_column and text_column in df.columns:
            text = " ".join(str(i) for i in df[text_column].dropna())
            if text: # Check if there is any text after dropping NaNs
                stopwords = set(STOPWORDS)
                wordcloud = WordCloud(stopwords=stopwords, background_color='white', max_words=100,
                                      max_font_size=40, scale=3, random_state=1).generate(text)

                plt.figure(figsize=(12,8))
                plt.imshow(wordcloud, interpolation='bilinear')
                plt.axis('off')
                plt.title(f"Word Cloud for '{text_column}'")
                plt.show()
            else:
                print(f"\n'{text_column}' column is empty after dropping missing values. Cannot generate word cloud.")
        elif text_column and text_column not in df.columns:
             print(f"\nSpecified text column '{text_column}' not found in the dataset.")
        elif text_column is None:
             print("\nNo text column specified. Skipping word cloud generation.")


    except FileNotFoundError:
        print(f"Error: File not found at {file_path}")
    except Exception as e:
        print(f"An error occurred: {e}")

# --- Example Usage ---

# For an email dataset (replace 'email_dataset.csv' and 'email_text' with your actual file and column names)
# perform_eda('email_dataset.csv', text_column='email_text')

# For a DEV lab observation note dataset (replace 'dev_lab_data.csv' and potential text column)
# perform_eda('dev_lab_data.csv', text_column='observation_notes') # Assuming 'observation_notes' is the text column

# For a GitHub data dataset (replace 'github_data.csv' and potential text column)
# perform_eda('github_data.csv', text_column='commit_message') # Assuming 'commit_message' is the text column

# Example with a dummy dataset
data = {'col1': [1, 2, 3, 4, 5, None],
        'col2': ['A', 'B', 'A', 'C', 'B', 'A'],
        'col3': [10.5, 12.3, 11.0, 15.2, 14.1, 13.0],
        'col4': ['text1', 'text2', 'text3', 'text4', 'text5', 'text6']}
dummy_df = pd.DataFrame(data)
# Save the dummy DataFrame to a CSV for the example
dummy_df.to_csv('dummy_dataset.csv', index=False)

# Run EDA on the dummy dataset
perform_eda('dummy_dataset.csv', text_column='col4')
